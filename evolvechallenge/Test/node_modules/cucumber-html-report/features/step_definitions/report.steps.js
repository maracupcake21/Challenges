var
  fs = require('fs'),
  os = require('os'),
  path = require('path'),
  expect = require('chai').expect,
  sinon = require('sinon'),
  Report = require('../../index');

var options = {};

module.exports = function() {

  var sandbox;

  this.Before(function(scenario) {
    sandbox = sinon.sandbox.create();
    sandbox.stub(console, 'error');

    options.source = path.join(__dirname, './testdata/cucumber_report.json');
  });

  this.After(function(scenario) {
    sandbox.restore();

    scenario.attach('Operating System Platform: ' + os.platform(), 'text/plain');
    scenario.attach('Operating System Release Version ' + os.release(), 'text/plain');
  });

  this.Given(/^a JSON file generated by cucumber$/, function(callback) {
    var json = JSON.parse(fs.readFileSync(options.source, 'UTF-8'));
    expect(json.length).to.equal(1); // Number of features
    callback();
  });

  this.Given(/^the destination directory is set to "([^"]*)"$/, function(dir, callback) {
    options.dest = './' + dir;
    callback();
  });

  this.Given(/^no template is provided$/, function(callback) {
    expect(options).to.not.have.property('template');
    callback();
  });

  this.Given(/^an invalid template is provided$/, function(callback) {
    options.template = 'gibberish';
    callback();
  });

  this.Given(/^a custom template is provided$/, function(callback) {
    options.template = './templates/template2.html';
    expect(options).to.have.property('template');
    callback();
  });

  this.When(/^I run the report generator$/, function(callback) {
    new Report(options).createReport();
    callback();
  });

  this.Then(/^I should get a HTML report in the "([^"]*)" directory$/, function(dir, callback) {
    var reportFile = path.join('./' + dir, 'index.html');
    expect(fs.existsSync(reportFile)).to.equal(true);
    callback();
  });

  this.Given(/^no JSON file is provided$/, function(callback) {
    options.source = undefined;
    callback();
  });

  this.Then(/^I should get an error message$/, function(callback) {
    expect(console.error.called).to.equal(true);
    callback();
  });

};